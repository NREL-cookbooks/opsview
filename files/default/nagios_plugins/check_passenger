#!/usr/bin/env ruby

require "optparse"
require 'rexml/document'
include REXML

options = {}
optparser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"
  opts.on('-w', '--warn PROCESSES', 'Warn queued processes') { |o| options[:warn] = o.to_i if o }
  opts.on('-c', '--critical PROCESSES', 'Critical queued processes') {|o| options[:critical] = o.to_i if o }
  opts.on('-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

optparser.parse!

status = `passenger-status --show=xml`
xmldoc = Document.new(status)

max = XPath.first(xmldoc, '/info/max').text.to_i
processes = XPath.first(xmldoc, '/info/process_count')
if processes.nil?
  processes = XPath.first(xmldoc, '/info/count')
end
processes = processes.text.to_i
queued = XPath.first(xmldoc, '/info/get_wait_list_size')
if queued.nil?
  queued = XPath.first(xmldoc, '/info/global_queue_size')
end
queued = queued.text.to_i

message = "Max pool size: #{max}, Processes: #{processes}, Requests in top-level queue: #{queued}"
perf = "'max'=#{max} 'processes'=#{processes} 'queued'=#{queued}"

sub_queue_critical = false
sub_queue_warn = false

XPath.each(xmldoc, '//supergroup') do |sg|
  name = sg.get_elements("name").first.text
  queue = sg.get_elements("get_wait_list_size").first.text.to_i
  perf += " '#{name} queue'=#{queue}"
  if(options[:critical] && queue >= options[:critical])
    sub_queue_critical = true
  elsif(options[:warn] && queue >= options[:warn])
    sub_queue_warn = true
  end
end


if(options[:critical] && (queued >= options[:critical] || sub_queue_critical))
  puts "CRITICAL - #{message} | #{perf}"
  exit 2
elsif(options[:warn] && (queued >= options[:warn] || sub_queue_warn))
  puts "WARNING - #{message} | #{perf}"
  exit 1
else
  puts "OK - #{message} | #{perf}"
  exit 0
end
